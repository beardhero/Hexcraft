"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = void 0;
var types_1 = require("../types");
/**
    TODO:
    - Support inheritance
    - Support importing Schema dependencies
*/
var typeMaps = {
    "string": "string",
    "number": "number",
    "boolean": "boolean",
    "int8": "number",
    "uint8": "number",
    "int16": "number",
    "uint16": "number",
    "int32": "number",
    "uint32": "number",
    "int64": "number",
    "uint64": "number",
    "float32": "number",
    "float64": "number",
};
var distinct = function (value, index, self) { return self.indexOf(value) === index; };
function generate(context, options) {
    return context.classes.map(function (klass) { return ({
        name: klass.name + ".lua",
        content: generateClass(klass, options.namespace, context.classes)
    }); });
}
exports.generate = generate;
function generateClass(klass, namespace, allClasses) {
    var allRefs = [];
    klass.properties.forEach(function (property) {
        var type = property.type;
        // keep all refs list
        if ((type === "ref" || type === "array" || type === "map")) {
            allRefs.push(property);
        }
    });
    // TOOD: inheritance
    return types_1.getCommentHeader().replace(/\/\//mg, "--") + "\n\nlocal schema = require 'colyseus.serialization.schema.schema'\n" + allRefs.
        filter(function (ref) { return ref.childType && typeMaps[ref.childType] === undefined; }).
        map(function (ref) { return ref.childType; }).
        concat(types_1.getInheritanceTree(klass, allClasses, false).map(function (klass) { return klass.name; })).
        filter(distinct).
        map(function (childType) { return "local " + childType + " = require '" + (namespace ? namespace + "." : '') + childType + "'"; }).
        join("\n") + "\n\nlocal " + klass.name + " = schema.define({\n" + klass.properties.map(function (prop) { return generatePropertyDeclaration(prop); }).join(",\n") + ",\n    [\"_fields_by_index\"] = { " + klass.properties.map(function (prop) { return "\"" + prop.name + "\""; }).join(", ") + " },\n\n    [\"on_change\"] = function(changes)\n        -- on change logic here\n    end,\n\n    [\"on_add\"] = function()\n        -- on add logic here\n     end,\n\n    [\"on_remove\"] = function()\n        -- on remove logic here\n    end,\n})\n\nreturn " + klass.name + "\n";
}
function generatePropertyDeclaration(prop) {
    var typeArgs;
    if (prop.childType) {
        var isUpcaseFirst = prop.childType.match(/^[A-Z]/);
        if (isUpcaseFirst) {
            typeArgs += "" + prop.childType;
        }
        else {
            typeArgs += "\"" + prop.childType + "\"";
        }
        if (prop.type === "ref") {
            typeArgs = (isUpcaseFirst)
                ? "" + prop.childType
                : "\"" + prop.childType + "\"";
        }
        else if (prop.type === "array") {
            typeArgs = (isUpcaseFirst)
                ? "{ " + prop.childType + " }"
                : "{ \"" + prop.childType + "\" }";
        }
        else if (prop.type === "map") {
            typeArgs = (isUpcaseFirst)
                ? "{ map = " + prop.childType + " }"
                : "{ map = \"" + prop.childType + "\" }";
        }
    }
    else {
        typeArgs = "\"" + prop.type + "\"";
    }
    return "    [\"" + prop.name + "\"] = " + typeArgs;
}
// function generatePropertyInitializer(prop: Property) {
//     let initializer = "";
//     if(prop.type === "ref") {
//         initializer = `new ${prop.childType}()`;
//     } else if(prop.type === "array") {
//         initializer = `new schema.ArraySchema()`;
//     } else if(prop.type === "map") {
//         initializer = `new schema.MapSchema()`;
//     }
//     return `this.${prop.name} = ${initializer}`;
// }
//# sourceMappingURL=data:application/json;base64,